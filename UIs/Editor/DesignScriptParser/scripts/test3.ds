[associative, version="1.0.0.0"]
{
	// function definition
	external("Geometry.dll") def CreatePoint : int(_x : double, _y : double, _z : double);
	def foo : double[][](a : int[][], b : int[][])
	{	
		return = a + b;
	}
	
	//class definition
	class Point extends Geometr  AutoCad
	{
		x : var;
		y : var;
		z : var;
		id : var;
		
		constructor Point(_x : double, _y : double, _z : double)
		{
			x = _x;
			y = _y;
			z = _z;
			
			id = CreatePoint(x, y, z);
		}
		
		def Distance : double(p : Point)
		{
			return = sqrt(square(p.x - x) + square(p.y - y) + square(p.z - z));
		}
	}
	
	// stack modifier
	a = #{ a + 10 => foo;
			+ a => bar;
			+30 => hello;
			+ sin(a) => world;
			-cos(b);
		}
		
	
	// imperative block
	[imperative, fingureprint = "foo", version = "1.0.0.1"]
	{
		a = a + 1;
	}
	
	// array and identifierlist
	a.b.c.d.e.f.g[1][3][4][10 + 20][a][b].x.y.z = 100;
	b[1][2][3].x = 10;
	
	// range expression
	r = 1..10;
	r = 1..10..1;
	r = 1..10..#1;
	r = 1..10..~1;
	
	// various expressions
	a = a + !a(a+v+c+~a+(1); 
	a = (1);
	a = a.b * c[d] / e[1] * ( f[2] + d[3]) * ~e[2].m + ~!m;
	
}