def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            







def ChildFunction : double (r1 : double)
	{
	return = r1;
	
	}
	def ParentFunction : double (r1 : double)
	{
		return = ChildFunction (r1)*2;
	}
	d1 = 1.05;
	
	result = ParentFunction (d1);

a = 1;
	b = 10;
	def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	
}
/* foo bar */

	
	sum = Sum (a, b);

def Foo : int(input : int)
	{
		multiply = 5;
		divide = 10;
	
		return = {input*multiply, input/divide};
	}
	
	input = 20;
	sum = Foo (input); // bar foo

def myFunction : double (a: double, b: double)
	{
		return = a + b;
	}
	d1 = null;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def myFunction : int (a:int, b:int)
	{
		return = a + b;
	}
	d1 = 1.12;
	d2 = 0.5;
	
	result = myFunction (d1, d2);

def Divide : double (a:int, b:int)
	{
		return = a/b;
	}
	d = Divide (1,3);

def Divide : int(a:int, b:int)
	{
		return = a/b;
	}

	d = Divide (1,3);



	d = singleLine(1,3);

def Sum : int(a : int, b : int)
	{
	
		return = a + b;
	}
	
	a = 1;
	b = 10;
	
	sum = Sum (a, b);

a = 1;
	b = 10;
	
	sum = Sum (a, b);
	
	def Sum : int(a : int, b : int)
	{
	
	return = a + b;
	}

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input); 

def Level1 : int (a : int)
	{

		return = Level2(a+1);
	}
	
	def Level2 : int (a : int)
	{

		return = a + 1;
	}


	input = 3;
	result = Level1(input);

def Foo : int (a : int)
	{
		a = a + 1;
		return = a;
	}
	input = 3;
	result = Foo(input); 
	originalInput = input;
	
def Foo : int (a : int)
	{

		return = 5;
	}
	
	result = Foo(1,2); 

def Foo : int ()
	{

		return = 4;
	}

	Foo = 5;

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	
	def Foo1 : int ()
	{

		return = 6;
	}
	
	
	
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	
	
	def Foo2 : int ()
	{

		return = 6;
	}
	
	
	result1 = Foo1 ();
	result2 = Foo2 ();

def Foo1 : int ()
	{

		return = 5;
	}
	

	result1 = Foo1 ();

def Foo : bool (input : bool)
	{

		return = input;
	}
	
	input = false;
	result1 = Foo (input);
	result2 = Foo (true);


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;	
		}
		
		def Get_Z : double ()
		{
			return = Z;
		}
		
		def Sum : double ()
		{
			return = Get_X() + Get_Y() + Get_Z();
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();

class Point
    {
        id : var;
        x : var;
        y : var;
        z : var;
        
        constructor ByCoordinates(xx : double, yy : double, zz : double)
        {
            id = 0;
            
            x = xx;
            y = yy;
            z = zz;
        }
    }
    
    class Line
    {
        id : var;
        startPoint : var;
        endPoint : var;
        
        constructor ByStartPointEndPoint(sp : Point, ep : Point)
        {
            id = 2;
            
            startPoint = sp;
            endPoint = ep;
        }
    }
    
    sp = Point.ByCoordinates(1,2,3);
    ep = Point.ByCoordinates(11,12,13);
    
    l = Line.ByStartPointEndPoint(sp, ep);
    
    sp_x = l.startPoint.x; // this line causes failure

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXYZ (x : double, y : double, z: double)
        {
			X = x;
			Y = y;
			Z = z;
        }
	
    }
	
	class MyExtendedPoint extends MyPoint
	{
		constructor ByX (x : double)	
		{
			X = x;
			Y = 20.2;
			Z = 300.3;
		}
	}
	
	

    pt1 = MyExtendedPoint.ByX (10.1);

	xPt1 = pt1.X;
	yPt1 = pt1.Y;
	zPt1 = pt1.Z;


	class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor Create (x : double, y : double, flag: bool)
        {
			X = x;
			Y = y;
			Z = 3000.1;
        }
		
		constructor Create (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.1;
        }

		
    }

    pt1 = MyPoint.Create (10.0,200.0);
	pt2 = MyPoint.Create (10.0,200.0, true);
	pt3 = MyPoint.Create (10.0,200.0, false);

	zPt1 = pt1.Z;
	zPt2 = pt2.Z;
	zPt3 = pt3.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                            
        constructor ByXY (x : double, y : double)
        {
			X = x;
			Y = y;
			Z = 0.0;
        }
		
		constructor ByXZ (x : double, z : double)
        {
			X = x;
			Y = 0.0;
			Z = z;
        }
		
		constructor ByYZ (y : double, z : double)
        {
			X = 0.0;
			Y = y;
			Z = z;
        }
    }

    pt1 = MyPoint.ByXY (10.1, 200.2);
	pt2 = MyPoint.ByXZ (10.1, 3000.3);	
	pt3 = MyPoint.ByYZ (200.2,3000.3);
	
	xPt1 = pt1.X;
	yPt1 = pt1.Y;	
	zPt1 = pt1.Z;
	
	xPt2 = pt2.X;	
	yPt2 = pt2.Y;	
	zPt2 = pt2.Z;
	
	xPt3 = pt3.X;	
	yPt3 = pt3.Y;	
	zPt3 = pt3.Z;		




class MyVector
{
	X : double;
	Y : double;
						
	constructor MyVector (x : double, y : double)
	{
		X = x;
		Y = y;
	}

}

class MyPoint
{
	X : double;
	Y : double;
	Z : double;
	
	constructor MyPoint (direction : MyVector, z : double)
	{
		X = direction.X;
		Y = direction.Y;
		Z = z;
	}
}


XYDirection = MyVector.MyVector (1.3,20.5);
myPoint = MyPoint.MyPoint(XYDirection, 300.8);

xPosition = myPoint.X;
yPosition = myPoint.Y;
zPosition = myPoint.Z;
	

class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        }
		
		
		def Get_X : double()
		{
			return = X;
		}
		
		def Get_Y : double()
		{
			return = Y;
		}
		def Get_Z : double()
		{
			return = Z;
		}
    }
	
	def GetPointValue : double (pt : MyPoint)
	{
		return = pt.Get_X() + pt.Get_Y() + pt.Get_Z(); 
	}
	
	myNewPoint = MyPoint.MyPoint (1.0, 10.1, 200.2);
	myPointValue = GetPointValue(myNewPoint);




class MyPoint
	{
		X : double;
		Y : double;
		Z : double;
                                
        constructor MyPoint (x : double, y : double, z : double)
        {
			X = x;
			Y = y;
			Z = z;
        } 
		
		def Sum : double ()
		{
			return = X + Y + Z;
		}
    }
	
	myNewPoint = MyPoint.MyPoint (0.0, 1.2, 3.5);
	val = myNewPoint.Sum();




	class Point
	{
        _x : int;
        _y : int;
        _z : int;
                                
        constructor Point(xx : int, yy : int, zz : int)
        {
			_x = xx;
            _y = yy;
            _z = zz;
        }
                                
        def get_X : int () 
        {
            return = _x;
        }

    }
	
	newPoint = Point.Point(1,2,3);
	
	xPoint = newPoint._x;
    yPoint = newPoint._y;            
    zPoint = newPoint._z;               

            















